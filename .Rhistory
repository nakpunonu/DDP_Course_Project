g + geom_line()+facet_grid(.~type)
g + geom_point()+facet_grid(.~type)+geom_smooth(method="lm")
g + geom_point()+facet_grid(.~type)+geom_smooth(method="lm",aes(group=1))
head(NEI)
NEIbalt <- NEI[NEI$fips=="24510",]
a<- ggplot(NEIbalt, aes(year,Emissions))
a + geom_point()
a + geom_point()+facet_grid(.~type)
a + geom_point()+facet_grid(.~type)+geom_smooth(method="lm")
NEIbalt <- NEI[NEI$fips=="24510",]
summaryq3<-tapply(NEIbalt$Emissions,list(NEIbalt$type,NEI$year),sum)
summaryq3 <- as.data.frame(summaryq3)
tableq3 <- data.frame(rownames(summaryq3),stack(summaryq3))
names(tableq3) <- c("type","Total_Emissions","year")
g <- ggplot(tableq3, aes(year,total_Emissions))
g + geom_point()+facet_grid(.~type)+geom_smooth(method="lm")
g <- ggplot(tableq3, aes(year,Total_Emissions))
g + geom_point()+facet_grid(.~type)+geom_smooth(method="lm")
g + geom_point()+facet_grid(.~type)+geom_smooth(method="lm",aes(group=1))
head(NEI)
SCC
head(SCC)
names(SCC)
SCC$Option.Group
head(SCC$Option.Group)
names(SCC)
SCC$EI.Sector
head(SCC$EI.Sector)
levels(SCC$EI.Sector)
levels(SCC$EI.Sector)
levels(SCC$EI.Sector)[23]
levels(SCC$EI.Sector)[13,23]
levels(SCC$EI.Sector)[23][13]
levels(SCC$EI.Sector)[c(23,13)
levels(SCC$EI.Sector)[c(23,13)]
head(NEI)
head(SCC)
data4 <- subset(SCC, EI.Sector== levels(SCC$EI.Sector)[c(23,13)])
data4 <- subset(SCC, EI.Sector== levels(SCC$EI.Sector)[23])
levels(SCC$EI.Sector[23])
levels(SCC$EI.Sector)[23]
EI.Sector==levels(SCC$EI.Sector)[23]
scc$EI.Sector==levels(SCC$EI.Sector)[23]
SCC$EI.Sector==levels(SCC$EI.Sector)[23]
data4 <- subset(SCC, EI.Sector== levels(EI.Sector)[23])
data4 <- subset(SCC, EI.Sector== levels(EI.Sector)[c(13,23)])
SCC$EI.Sector==levels(SCC$EI.Sector)[c(13,23)]
levels(SCC$EI.Sector)[c(13,23)]
data4 <- subset(SCC, EI.Sector== levels(EI.Sector)[23] | EI.Sector==levels(EI.Sector)[13])
data4
levels(SCC$EI.Sector)
levels(SCC$EI.Sector)[18]
str(SCC$EI.Sector)
summary(SCC$EI.Sector)
head(NEI)
head(SCC)
criteria4 <- subset(SCC, EI.Sector==levels(EI.Sector)[13] | EI.Sector == levels(EI.Sector)[18] | EI.Sector == levels(EI.Sector)[23])
criteria4
criteria4$SCC
length(criteria4$SCC)
NEI$SCC == length(criteria4$SCC)
NEI$SCC == criteria4$SCC
NEI[which(NEI$SCC==criteria4$SCC),]
which(NEI$SCC==criteria4$SCC)
length(which(NEI$SCC==criteria4$SCC))
NEI$SCC==criteria4$SCC
x <- data.frame(a = 1:20)
x
x <- data.frame(a = 20:50)
a
x
b <- 33:45
b
x[x$a==b,]
b <- 33:55
x[x$a==b,]
b
x[x$a==b,]
c <- c(13,20,19)
c
x[x$a==c,]
x$a
x[x$a==list(c),]
criteria4$SCC
class(criteria4$SCC)
?intersect
intersect(NEI$SCC,criteria4$SCC)
length(intersect(NEI$SCC,criteria4$SCC))
?merge
?select
x[x$a %in% list(c),]
x[x$a %in% c,]
NEI$SCC == criteria4$SCC
NEI$SCC %in% criteria4$SCC
subset4 <- NEI[NEI$SCC %in% criteria4$SCC,]
subset4
head(subset4)
criteria4
head(subset4)
criteria4$SCC
summaryq4<-tapply(subset4$Emissions,list(subset4$type,subset4$year),sum)
summaryq4 <- as.data.frame(summaryq4)
tableq4 <- data.frame(rownames(summaryq4),stack(summaryq4))
names(tableq4) <- c("type","Total_Emissions","year")
tableq4
subset4 <- NEI[NEI$SCC %in% criteria4$SCC,]
summaryq4<-tapply(subset4$Emissions,subset4$year,sum)
summaryq4
plot(summaryq4)
summaryq4 <- as.data.frame(summaryq4)
summaryq4
plot(rownames(summaryq4),summaryq4$summaryq4)
plot(as.factor(rownames(summaryq4)),summaryq4$summaryq4)
head(NEI)
head(SCC)
levels(SCC$EI.Sector)
levels(SCC$EI.Sector)
criteria5 <- subset(SCC, EI.Sector==levels(EI.Sector)[c(13,18,23)])
criteria5 <- subset(SCC, EI.Sector%in%levels(EI.Sector)[c(13,18,23)])
criteria5
criteria5$SCC
criteria4$SCC
length(criteria5$SCC)
length(criteria4$SCC)
levels(SCC$EI.Sector)
levels(SCC$EI.Sector)
criteria5 <- subset(SCC, EI.Sector %in% levels(EI.Sector)[43:52])
subset5 <- NEI[NEI$SCC %in% criteria5$SCC,]
# Sum up combustion for each year and plot graph
summaryq5<-tapply(subset5$Emissions,subset5$year,sum)
summaryq5 <- as.data.frame(summaryq5)
plot(as.factor(rownames(summaryq5)),summaryq4$summaryq5)
criteria5$EI.Sector
nrow(subset5)
summaryq5
rownames(summaryq5)
as.factor(rownames(summaryq5))
plot(as.factor(rownames(summaryq5),summaryq5$summaryq5))
plot(as.factor(rownames(summaryq5)),summaryq5$summaryq5)
criteria5 <- subset(SCC, EI.Sector %in% levels(EI.Sector)[43:52])
pre.subset5 <- NEI[NEI$SCC %in% criteria5$SCC,]
subset5 <- pre.subset5[pre.subset5$fips=="24510",]
summaryq5<-tapply(subset5$Emissions,subset5$year,sum)
summaryq5 <- as.data.frame(summaryq5)
plot(as.factor(rownames(summaryq5)),summaryq4$summaryq5)
summaryq5<-tapply(subset5$Emissions,subset5$year,sum)
summaryq5 <- as.data.frame(summaryq5)
plot(as.factor(rownames(summaryq5)),summaryq5$summaryq5)
# select SCC numbers for combustion using SCC dataset
criteria6 <- subset(SCC, EI.Sector %in% levels(EI.Sector)[43:52])
pre.subset6 <- NEI[NEI$SCC %in% criteria6$SCC,]
# subset rows specific to Baltimore
subset6 <- pre.subset6[pre.subset6$fips=="24510" | pre.subset6$fips == "06037",]
# Sum up combustion for each year and plot graph
summaryq6<-tapply(subset6$Emissions,c(subset6$year,subset6$fips),sum)
summaryq6 <- as.data.frame(summaryq6)
# select SCC numbers for combustion using SCC dataset
criteria6 <- subset(SCC, EI.Sector %in% levels(EI.Sector)[43:52])
pre.subset6 <- NEI[NEI$SCC %in% criteria6$SCC,]
# subset rows specific to Baltimore
subset6 <- pre.subset6[pre.subset6$fips=="24510" | pre.subset6$fips == "06037",]
# Sum up combustion for each year and plot graph
summaryq6<-tapply(subset6$Emissions,list(subset6$year,subset6$fips),sum)
summaryq6 <- as.data.frame(summaryq6)
summaryq6
tableq6 <- data.frame(rownames(summaryq6),stack(summaryq6))
tableq6
names(tableq6)<- c("year","total_Emissions","fip")
tableq6
str(tableq6)
?transform
transform(tableq6,fip = factor(fip, labels = c("Baltimore","Los Angeles")))
tableq6 <- transform(tableq6,fip = factor(fip, labels = c("Los Angeles County","Baltimore City")))
tableq6
str(table6)
str(tableq6)
f <- ggplot(tableq6, aes(year,total_Emissions))
f + geom_line()
f <- ggplot(tableq6, aes(as.character(year),total_Emissions))
f + geom_line()
f <- ggplot(tableq6, aes(year,total_Emissions))
f + geom_line()
f + geom_line()+facet_grid(~.fip)
f + geom_line()+facet_grid(~.as.character(fip)
f + geom_line()+facet_grid(~.as.character(fip))
f + geom_line()+facet_grid(.~fip)
f + geom_point())+facet_grid(.~fip)
f + geom_point()+facet_grid(.~fip)
tableq6
summaryq6
f + geom_point()+facet_grid(.~fip)
a <- 30:50
b <- 45:55
a
b
a==b
a%in%b
which(a%in%b)
a[which(a%in%b)]
mtcars
?mtcars
data <- mtcars
data
data$transmission <- factor(data$am, levels = c("auto","manual"))
data
data$transmission <- factor(data$am, labels = c("auto","manual"))
data
str(data)
lm(mpg~transmission,data=data)
model(lm(mpg~transmission,data=data))
model1 <- (lm(mpg~transmission,data=data))
model1
data <- mtcars
data
data$transmission <- factor(data$am,labels = c("auto","manual"))
data
scatter(data)
pairs(data)
library(car)
scatterplot.matrix(~mpg+cyl+dilp+hp+wt+carb|transmission,data=data,main="Scatterplot Matrix")
scatterplotMatrix(~mpg+cyl+dilp+hp+wt+carb|transmission,data=data,main="Scatterplot Matrix")
scatterplotMatrix(~mpg+cyl+disp+hp+wt+carb|transmission,data=data,main="Scatterplot Matrix")
library(lattice)
plot(~mpg+cyl+disp+hp+wt+carb|transmission,data=data,main="Scatterplot Matrix")
plot(~mpg+cyl+disp+hp+wt+carb|am,data=data,main="Scatterplot Matrix")
pairs(~mpg+cyl+disp+hp+wt+carb|transmission,data=data,main="Scatterplot Matrix")
pairs(~mpg+cyl+disp+hp+wt+carb|am,data=data,main="Scatterplot Matrix")
pairs(~mpg+cyl+disp+hp+wt+carb,data=data,main="Scatterplot Matrix")
pairs(~mpg+cyl+disp+hp+wt+carb+transmission,data=data,main="Scatterplot Matrix")
pairs(~mpg+cyl+disp+hp+wt+carb+am,data=data,main="Scatterplot Matrix")
pairs(~mpg+cyl+disp+hp+wt+carb+transmission,data=data,main="Scatterplot Matrix")
pairs(~mpg+cyl+disp+hp+wt+carb+am,data=data,main="Scatterplot Matrix")
data <- mtcars
data$trans <- factor(data$am,labels = c("auto","manual"))
pairs(~mpg+cyl+disp+hp+wt+carb+trans,data=data,main="Scatterplot Matrix")
model1 <- lm(mpg ~ cyl+disp+hp+wt+carb+trans, data = data)
summary(model1)
summary$coef
summary(model1)$coefficients
par(mfrow=c(2,2))
plot(model1)
vif(model1)
pairs(~mpg+cyl+disp+hp+wt+carb+trans,data=data,main="Scatterplot Matrix")
testmodel <- lm(mpg ~ cyl+disp+hp+wt+carb+trans, data = data)
model1 <- lm(mpg ~ trans, data = data)
model2 <- lm(mpg ~ carb+trans, data = data)
model3 <- lm(mpg ~ cyl+carb+trans, data = data)
model4 <- lm(mpg ~ cyl+hp+carb+trans, data = data)
model5 <- lm(mpg ~ cyl+hp+wt+carb+trans, data = data)
model6 <- lm(mpg ~ cyl+disp+hp+wt+carb+trans, data = data)
anova(model1,model2,model3,model4,model5,model6)
model1 <- lm(mpg ~ trans, data = data)
model2 <- update(model1, mpg ~ carb + trans)
model3 <- update(model1, mpg ~ cyl + carb + trans)
model4 <- update(model1, mpg ~ cyl + hp + carb + trans)
model5 <- update(model1, mpg ~ cyl + hp + wt + carb + trans)
model6 <- update(model1, mpg ~ cyl + disp + hp + wt + carb + trans)
anova(model1,model2,model3,model4,model5,model6)
model6 <- update(model1, mpg ~ cyl + disp + hp + wt + carb + trans)
model3
vif(model3)
vif(model4)
vif(model2)
vif(model5)
library(swirl)
swirl()
dim(hunger)
984
anova(model1,model2,model3,model4,model5,model6)
anova(model1,model2,model3,model4,model5,model6)
summary(model3)$coef
tapply(data$mpg,data$trans,mean)
modelcheck <- lm(mpg ~ trans + carb + cyl, data = data)
summary(modelcheck)$coef
modelcheck <- lm(mpg ~ am + carb + cyl, data = data)
summary(modelcheck)$coef
str(data)
model1
tapply(data$mpg,data$trans,mean)
17.147+7.245
summary(model1)$coef
summary(model1)$coefficient
summary(model1)
summary(model3)
summary(model1)
plot(model3)
plot(model1)
summary(model6)
summary(model5)
summary(model2)
summary(model1)
summary(model1)
plot(model3)
plot(model6)
plot(model3)
plot(model3)[1]
summary(model3)
dfbetas(model3)
cooks.distance(model3)
datatest <- data
datatest
datatest[3,]
datatest[-3,]
datatest <- datatest[-3,]
datatest
nrow(dataset)
nrow(datatestt)
nrow(datatest)
nrow(data)
all.equal(dataset,data)
all.equal(datatest,data)
?all.equal
model50 <- lm(mpg ~ cyl+carb+trans, data = datatest)
summary(model50)
dfbetas(model3)
summary(model3)$coefficients
summary(model50)$coefficients
data
boxplot(data$mpg ~ data$trans)
boxplot(data$mpg ~ data$trans)
coinfint(model3)
confint(model3)
class(confint(model3))
confint(model3)[1,2]
class(confint(model1))
confint(model1)
confint(model3)
summary(model3)$coefficents[2]
model3
summary(model3)$coefficients[2]
shiny::runApp('shiny2')
shiny::runApp('shiny3 (course project)')
?mtcars
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
library(datasets)
?predict
model3
head(data)
predict(model3,cyl=6,carb=4,trans=1)
predict(model3,cyl=6,carb=4,trans=0)
predict(model3,cyl=6,carb=4,trans=1)
predict(model3,data.frame(cyl=6,carb=4,trans=1))
predict(model3,data.frame(cyl=6,carb=4,trans=manual))
predict(model3,data.frame(cyl=6,carb=4,trans=0))
predict(model3,data.frame(cyl=6,carb=4,trans="manual"))
predict(model3,data.frame(cyl=6,carb=4,trans="auto"))
head(data)
predict(model3,data.frame(cyl=6,carb=4,trans="manual"))
predict(model3,data.frame(cyl=6,carb=1,trans="auto"))
confint(predict(model3,data.frame(cyl=6,carb=1,trans="auto")))
predict(model3,data.frame(cyl=6,carb=1,trans="auto"))
predict(model3,data.frame(cyl=6,carb=1,trans="auto"),interval="confidence")
predict(model3,data.frame(cyl=6,carb=1,trans="auto"),interval="confidence")[1,2]
predict(model3,data.frame(cyl=6,carb=1,trans="auto"),interval="confidence")[1,3]
predict(model3,data.frame(cyl=6,carb=1,trans="auto"),interval="confidence")[1,1]
predict(model3,data.frame(cyl=6,carb=1,trans="auto"))
predict(model3,data.frame(cyl=6,carb=1,trans="auto"))[1,1]
predict(model3,data.frame(cyl=6,carb=1,trans="auto"))
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny1')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
runApp(displayMode='showcase')
runAapp()
library(shiny)
runAapp()
runApp()
shiny::runApp('shiny3 (course project)')
runApp()
runApp("./shiny3 (course project)/")
runApp("./shiny3 (course project)")
runApp("./shiny3 (course project)",displayMode='showcase')
runApp("./shiny3 (course project)",displayMode=showcase)
runApp("./shiny3 (course project)")
shiny::runApp('shiny3 (course project)')
runApp()
runApp(displayMode='showcase')
shiny::runApp('shiny2')
shiny::runApp('shiny1')
head(data)
?textInput
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
?runApp()
runApp(display.Mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
predict(model3,data.frame(cyl=6,carb=4,trans="manual"))
predict(model3,data.frame(6,4,"manual"))
a <- 6
b <- 4
c <- "manual"
c
predict(model3,data.frame(cyl=a,carb=b,trans=c))
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
library(datasets)
data <- mtcars
data$trans <- factor(data$am,labels = c("auto","manual"))
model3 <- lm(mpg ~ cyl + carb, data = data)
a <- 6
b <- 4
prediction <- predict(model3,data.frame(cyl=a, carb=b),interval="confidence")[1,1]
prediction
uc <- predict(model3,data.frame(cyl=a, carb=b),interval="confidence")[1,3]
uc
lc <- predict(model3,data.frame(cyl =a, carb= b),interval="confidence")[1,2]
lc
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
predict(model3,data.frame(cyl=a, carb=b))
predict(model3,data.frame(cyl=a, carb=b))
predict(model3,data.frame(cyl=a, carb=b))[1]
predict(model3,data.frame(cyl=a, carb=b))[1][[1]]
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
predict(model3,data.frame(cyl=a, carb=b),interval="confidence")[1,1]
class(predict(model3,data.frame(cyl=a, carb=b),interval="confidence")[1,1])
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny2')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)/test')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
predict(model3,data.frame(cyl = input$text1, carb = input$text2, am = input$text3),interval="confidence")[1,3]
data
data$cyl
class(data$cyl)
class(data$carb)
class(data$am)
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
data
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
data
?radioButtons
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
checkboxInput
?checkboxInput
?checkboxGroupInput
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
?selectInput
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
data
shiny::runApp('shiny3 (course project)')
?checkboxGroupInput
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
shiny::runApp('shiny3 (course project)')
getwd()
setwd("./slidify3 (course project)")
author("DDP_ShinyApp_CourseProject")
library(slidify)
author("DDP_ShinyApp_CourseProject")
slidify("index.Rmd")
